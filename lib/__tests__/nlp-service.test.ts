/**
 * Tests manuales para el servicio NLP
 * 
 * Para ejecutar estos tests, copia el c√≥digo en la consola del navegador
 * o en un ambiente Node.js con los m√≥dulos necesarios.
 */

import {
  parseVoiceCommand,
  validateParsedCommand,
  generateConfirmationMessage,
  generateSuggestions,
  detectCorrection,
  applyCorrection,
  enrichWithDatabaseIds,
  validateBackendFormat,
} from "../nlp-service"

/**
 * Test Suite: An√°lisis de Intenciones
 */

// Test 1: Detectar un gasto simple
console.log("Test 1: Detectar un gasto simple")
const test1 = parseVoiceCommand("gast√© 50000 pesos en una hamburguesa")
console.assert(test1.intention === "gasto", "Debe detectar intenci√≥n de gasto")
console.assert(test1.amount === 50000, "Debe extraer monto 50000")
console.assert(test1.categoryName === "Alimentos", "Debe detectar categor√≠a Alimentos")
console.assert(test1.confidence === "alta", "Confianza debe ser alta")
console.log("‚úÖ Test 1 pasado\n")

// Test 2: Detectar un ingreso de salario
console.log("Test 2: Detectar un ingreso de salario")
const test2 = parseVoiceCommand("recib√≠ 1000000 de salario")
console.assert(test2.intention === "ingreso", "Debe detectar intenci√≥n de ingreso")
console.assert(test2.amount === 1000000, "Debe extraer monto 1000000")
console.assert(test2.categoryName === "Salario", "Debe detectar categor√≠a Salario")
console.log("‚úÖ Test 2 pasado\n")

// Test 3: Detectar un gasto en transporte
console.log("Test 3: Detectar un gasto en transporte")
const test3 = parseVoiceCommand("pagu√© 80000 en transporte")
console.assert(test3.intention === "gasto", "Debe detectar intenci√≥n de gasto")
console.assert(test3.amount === 80000, "Debe extraer monto 80000")
console.assert(test3.categoryName === "Transporte", "Debe detectar categor√≠a Transporte")
console.log("‚úÖ Test 3 pasado\n")

// Test 4: Detectar gasto en servicios
console.log("Test 4: Detectar gasto en servicios")
const test4 = parseVoiceCommand("gast√© 150000 en internet")
console.assert(test4.intention === "gasto", "Debe detectar intenci√≥n de gasto")
console.assert(test4.amount === 150000, "Debe extraer monto 150000")
console.assert(test4.categoryName === "Servicios", "Debe detectar categor√≠a Servicios")
console.log("‚úÖ Test 4 pasado\n")

// Test 5: Comando sin categor√≠a clara
console.log("Test 5: Comando sin categor√≠a clara")
const test5 = parseVoiceCommand("gast√© 25000")
console.assert(test5.intention === "gasto", "Debe detectar intenci√≥n de gasto")
console.assert(test5.amount === 25000, "Debe extraer monto 25000")
console.assert(test5.categoryName === undefined, "No debe detectar categor√≠a")
console.assert(test5.confidence === "media", "Confianza debe ser media")
console.log("‚úÖ Test 5 pasado\n")

// Test 6: Validaci√≥n de comando completo
console.log("Test 6: Validaci√≥n de comando completo")
const test6 = parseVoiceCommand("gast√© 50000 en hamburguesa")
const validation6 = validateParsedCommand(test6)
console.assert(validation6.valid === true, "Comando debe ser v√°lido")
console.assert(validation6.missingFields.length === 0, "No debe faltar informaci√≥n")
console.log("‚úÖ Test 6 pasado\n")

// Test 7: Validaci√≥n con monto faltante
console.log("Test 7: Validaci√≥n con monto faltante")
const test7 = parseVoiceCommand("gast√© en comida")
const validation7 = validateParsedCommand(test7)
console.assert(validation7.valid === false, "Comando debe ser inv√°lido")
console.assert(validation7.missingFields.includes("monto"), "Debe detectar monto faltante")
console.log("‚úÖ Test 7 pasado\n")

// Test 8: Generar mensaje de confirmaci√≥n
console.log("Test 8: Generar mensaje de confirmaci√≥n")
const test8 = parseVoiceCommand("gast√© 50000 en hamburguesa")
const message8 = generateConfirmationMessage(test8)
console.assert(message8.includes("gasto"), "Mensaje debe mencionar 'gasto'")
console.assert(message8.includes("50"), "Mensaje debe incluir el monto")
console.log("Mensaje generado:", message8)
console.log("‚úÖ Test 8 pasado\n")

// Test 9: Generar sugerencias
console.log("Test 9: Generar sugerencias para comando incompleto")
const test9 = parseVoiceCommand("gast√© en comida")
const suggestions9 = generateSuggestions(test9)
console.assert(suggestions9.length > 0, "Debe generar sugerencias")
console.assert(
  suggestions9.some(s => s.toLowerCase().includes("monto")),
  "Debe sugerir agregar monto"
)
console.log("Sugerencias generadas:", suggestions9)
console.log("‚úÖ Test 9 pasado\n")

// Test 10: Extraer montos con puntos separadores
console.log("Test 10: Extraer montos con puntos separadores")
const test10 = parseVoiceCommand("gast√© 1.500.000 pesos")
console.assert(test10.amount === 1500000, "Debe extraer monto 1500000")
console.log("‚úÖ Test 10 pasado\n")

console.log("üéâ Todos los tests pasaron exitosamente!")

/**
 * Test Suite: Correcciones
 */

console.log("\n=== Tests de Correcciones ===\n")

// Test 11: Detectar correcci√≥n de monto
console.log("Test 11: Detectar correcci√≥n de monto")
const correction1 = detectCorrection("no, era 15000")
console.assert(correction1.isCorrection === true, "Debe detectar correcci√≥n")
console.assert(correction1.field === "amount", "Debe detectar campo 'amount'")
console.assert(correction1.newValue === 15000, "Debe extraer monto 15000")
console.log("‚úÖ Test 11 pasado\n")

// Test 12: Detectar correcci√≥n de categor√≠a
console.log("Test 12: Detectar correcci√≥n de categor√≠a")
const correction2 = detectCorrection("cambia a Alimentos")
console.assert(correction2.isCorrection === true, "Debe detectar correcci√≥n")
console.assert(correction2.field === "category", "Debe detectar campo 'category'")
console.assert(correction2.newValue === "Alimentos", "Debe extraer categor√≠a")
console.log("‚úÖ Test 12 pasado\n")

// Test 13: Aplicar correcci√≥n de monto
console.log("Test 13: Aplicar correcci√≥n de monto")
const original = parseVoiceCommand("gast√© 50000 en comida")
const correction = detectCorrection("no, era 60000")
const corrected = applyCorrection(original, correction)
console.assert(corrected.amount === 60000, "Monto debe ser 60000")
console.assert(corrected.categoryName === "Alimentos", "Categor√≠a debe mantenerse")
console.log("‚úÖ Test 13 pasado\n")

// Test 14: Validar formato backend
console.log("Test 14: Validar formato backend")
const mockCategories = [
  { id: 1, name: "Alimentos", type: "gasto" as const, icon: "üçî", color: "#FF5733", created_at: "" }
]
const mockAccounts = [
  { id: 1, name: "Efectivo", type: "efectivo" as const, balance: 1000000, currency: "COP", is_archived: false, created_at: "", updated_at: "" }
]
const parsed = parseVoiceCommand("gast√© 50000 en comida")
const enriched = enrichWithDatabaseIds(parsed, mockCategories, mockAccounts)
console.assert(enriched.categoryId === 1, "Debe tener categoryId")
console.assert(enriched.accountId === 1, "Debe tener accountId")
const validation = validateBackendFormat(enriched)
console.assert(validation.valid === true, "Debe ser v√°lido para backend")
console.log("‚úÖ Test 14 pasado\n")

// Test 15: Detectar correcci√≥n de tipo
console.log("Test 15: Detectar correcci√≥n de tipo")
const correction3 = detectCorrection("no, era un ingreso")
console.assert(correction3.isCorrection === true, "Debe detectar correcci√≥n")
console.assert(correction3.field === "type", "Debe detectar campo 'type'")
console.assert(correction3.newValue === "ingreso", "Debe cambiar a ingreso")
console.log("‚úÖ Test 15 pasado\n")

console.log("üéâ Todos los tests de correcciones pasaron!")

/**
 * Test Suite: Ingresos (HU-006)
 */

console.log("\n=== Tests de Ingresos ===\n")

// Test 16: Detectar ingreso por freelance
console.log("Test 16: Detectar ingreso por freelance")
const test16 = parseVoiceCommand("recib√≠ 200000 pesos por freelance")
console.assert(test16.intention === "ingreso", "Debe detectar intenci√≥n de ingreso")
console.assert(test16.transactionType === "ingreso", "Tipo debe ser ingreso")
console.assert(test16.amount === 200000, "Debe extraer monto 200000")
console.log("‚úÖ Test 16 pasado\n")

// Test 17: Detectar ingreso con modismo "me entr√≥"
console.log("Test 17: Detectar ingreso con modismo 'me entr√≥'")
const test17 = parseVoiceCommand("me entr√≥ un ingreso de 150000")
console.assert(test17.intention === "ingreso", "Debe detectar intenci√≥n de ingreso")
console.assert(test17.amount === 150000, "Debe extraer monto 150000")
console.log("‚úÖ Test 17 pasado\n")

// Test 18: Detectar ingreso por cobro
console.log("Test 18: Detectar ingreso por cobro")
const test18 = parseVoiceCommand("cobr√© 300000 pesos")
console.assert(test18.intention === "ingreso", "Debe detectar intenci√≥n de ingreso")
console.assert(test18.amount === 300000, "Debe extraer monto 300000")
console.log("‚úÖ Test 18 pasado\n")

console.log("üéâ Todos los tests de ingresos pasaron!")

/**
 * Test Suite: Modismos Latinoamericanos (HU-008)
 */

console.log("\n=== Tests de Modismos ===\n")

// Test 19: Modismo "me gast√©"
console.log("Test 19: Modismo 'me gast√©'")
const test19 = parseVoiceCommand("me gast√© 50000 en el cine")
console.assert(test19.intention === "gasto", "Debe detectar intenci√≥n de gasto")
console.assert(test19.amount === 50000, "Debe extraer monto 50000")
console.assert(test19.categoryName === "Entretenimiento", "Debe detectar Entretenimiento")
console.log("‚úÖ Test 19 pasado\n")

// Test 20: Modismo "pagu√©"
console.log("Test 20: Modismo 'pagu√©'")
const test20 = parseVoiceCommand("pagu√© 30000 en el parqueadero")
console.assert(test20.intention === "gasto", "Debe detectar intenci√≥n de gasto")
console.assert(test20.amount === 30000, "Debe extraer monto 30000")
console.assert(test20.categoryName === "Transporte", "Debe detectar Transporte")
console.log("‚úÖ Test 20 pasado\n")

// Test 21: Modismo "se me fue en"
console.log("Test 21: Modismo 'se me fue en'")
const test21 = parseVoiceCommand("se me fueron 80000 en comida")
console.assert(test21.intention === "gasto", "Debe detectar intenci√≥n de gasto")
console.assert(test21.amount === 80000, "Debe extraer monto 80000")
console.log("‚úÖ Test 21 pasado\n")

// Test 22: Modismo "me entr√≥" para ingreso
console.log("Test 22: Modismo 'me entr√≥' para ingreso")
const test22 = parseVoiceCommand("me entraron 200000 de salario")
console.assert(test22.intention === "ingreso", "Debe detectar intenci√≥n de ingreso")
console.assert(test22.amount === 200000, "Debe extraer monto 200000")
console.assert(test22.categoryName === "Salario", "Debe detectar Salario")
console.log("‚úÖ Test 22 pasado\n")

console.log("üéâ Todos los tests de modismos pasaron!")

/**
 * Test Suite: Consultas (HU-007)
 */

console.log("\n=== Tests de Consultas ===\n")

// Test 23: Detectar consulta de √∫ltimo gasto
console.log("Test 23: Detectar consulta de √∫ltimo gasto")
const test23 = parseVoiceCommand("¬øcu√°l fue mi √∫ltimo gasto?")
console.assert(test23.intention === "consulta", "Debe detectar intenci√≥n de consulta")
console.assert(test23.queryType === "ultimo_gasto", "Debe detectar tipo ultimo_gasto")
console.log("‚úÖ Test 23 pasado\n")

// Test 24: Detectar consulta de total del d√≠a
console.log("Test 24: Detectar consulta de total del d√≠a")
const test24 = parseVoiceCommand("¬øcu√°nto gast√© hoy?")
console.assert(test24.intention === "consulta", "Debe detectar intenci√≥n de consulta")
console.assert(test24.queryType === "total_hoy", "Debe detectar tipo total_hoy")
console.log("‚úÖ Test 24 pasado\n")

// Test 25: Detectar consulta de √∫ltimo ingreso
console.log("Test 25: Detectar consulta de √∫ltimo ingreso")
const test25 = parseVoiceCommand("¬øcu√°l fue mi √∫ltimo ingreso?")
console.assert(test25.intention === "consulta", "Debe detectar intenci√≥n de consulta")
console.assert(test25.queryType === "ultimo_ingreso", "Debe detectar tipo ultimo_ingreso")
console.log("‚úÖ Test 25 pasado\n")

// Test 26: Detectar consulta de balance
console.log("Test 26: Detectar consulta de balance")
const test26 = parseVoiceCommand("¬øcu√°l es mi balance?")
console.assert(test26.intention === "consulta", "Debe detectar intenci√≥n de consulta")
console.assert(test26.queryType === "balance", "Debe detectar tipo balance")
console.log("‚úÖ Test 26 pasado\n")

console.log("üéâ Todos los tests de consultas pasaron!")

/**
 * Test Suite: Persistencia y Duplicados (HU-009)
 */

console.log("\n=== Tests de Persistencia ===\n")

// Test 27: Simular detecci√≥n de duplicado (l√≥gica en backend)
console.log("Test 27: Validaci√≥n de estructura para backend")
const test27 = parseVoiceCommand("gast√© 50000 en comida")
const mockCategoriesHU9 = [{ id: 1, name: "Alimentos", type: "gasto" as const, icon: "üçî", color: "#FF5733", created_at: "" }]
const mockAccountsHU9 = [{ id: 1, name: "Efectivo", type: "efectivo" as const, balance: 1000000, currency: "COP", is_archived: false, created_at: "", updated_at: "" }]
const enrichedHU9 = enrichWithDatabaseIds(test27, mockCategoriesHU9, mockAccountsHU9)
console.assert(enrichedHU9.categoryId === 1, "Debe tener categoryId")
console.assert(enrichedHU9.accountId === 1, "Debe tener accountId")
console.assert(enrichedHU9.amount === 50000, "Debe tener amount")
console.log("‚úÖ Test 27 pasado - Estructura lista para backend\n")

console.log("üéâ Todos los tests de persistencia pasaron!")

/**
 * Test Suite: Modo Manos Libres y Navegaci√≥n (HU-010, HU-011)
 */

console.log("\n=== Tests de Control y Navegaci√≥n ===\n")

// Test 28: Detectar activaci√≥n de modo continuo
console.log("Test 28: Detectar activaci√≥n de modo continuo")
const test28 = parseVoiceCommand("activar asistente")
console.assert(test28.intention === "control", "Debe detectar intenci√≥n de control")
console.assert(test28.controlType === "activar_continuo", "Debe detectar activaci√≥n")
console.log("‚úÖ Test 28 pasado\n")

// Test 29: Detectar desactivaci√≥n de modo continuo
console.log("Test 29: Detectar desactivaci√≥n de modo continuo")
const test29 = parseVoiceCommand("desactivar asistente")
console.assert(test29.intention === "control", "Debe detectar intenci√≥n de control")
console.assert(test29.controlType === "desactivar_continuo", "Debe detectar desactivaci√≥n")
console.log("‚úÖ Test 29 pasado\n")

// Test 30: Detectar navegaci√≥n a cuentas
console.log("Test 30: Detectar navegaci√≥n a cuentas")
const test30 = parseVoiceCommand("ir a cuentas")
console.assert(test30.intention === "navegacion", "Debe detectar intenci√≥n de navegaci√≥n")
console.assert(test30.navigationType === "cuentas", "Debe detectar navegaci√≥n a cuentas")
console.log("‚úÖ Test 30 pasado\n")

// Test 31: Detectar navegaci√≥n a transacciones
console.log("Test 31: Detectar navegaci√≥n a transacciones")
const test31 = parseVoiceCommand("abrir transacciones")
console.assert(test31.intention === "navegacion", "Debe detectar intenci√≥n de navegaci√≥n")
console.assert(test31.navigationType === "transacciones", "Debe detectar navegaci√≥n a transacciones")
console.log("‚úÖ Test 31 pasado\n")

// Test 32: Detectar cancelaci√≥n
console.log("Test 32: Detectar cancelaci√≥n")
const test32 = parseVoiceCommand("cancelar")
console.assert(test32.intention === "control", "Debe detectar intenci√≥n de control")
console.assert(test32.controlType === "cancelar", "Debe detectar cancelaci√≥n")
console.log("‚úÖ Test 32 pasado\n")

console.log("üéâ Todos los tests de control y navegaci√≥n pasaron!")

/**
 * Test Suite: Integraci√≥n con Categor√≠as (HU-014)
 */

console.log("\n=== Tests de Integraci√≥n con Categor√≠as ===\n")

// Test 33: Mapeo de palabra clave a categor√≠a exacta
console.log("Test 33: Mapeo de palabra clave a categor√≠a exacta")
const test33 = parseVoiceCommand("gast√© 50000 en hamburguesa")
const mockCategoriesHU14 = [
  { id: 1, name: "Alimentos", type: "gasto" as const, icon: "üçî", color: "#FF5733", created_at: "" },
  { id: 2, name: "Transporte", type: "gasto" as const, icon: "üöó", color: "#33C3FF", created_at: "" },
]
const mockAccountsHU14 = [{ id: 1, name: "Efectivo", type: "efectivo" as const, balance: 1000000, currency: "COP", is_archived: false, created_at: "", updated_at: "" }]
const enrichedHU14 = enrichWithDatabaseIds(test33, mockCategoriesHU14, mockAccountsHU14)
console.assert(enrichedHU14.categoryName === "Alimentos", "Debe mapear 'hamburguesa' a 'Alimentos'")
console.assert(enrichedHU14.categoryId === 1, "Debe tener ID de categor√≠a")
console.log("‚úÖ Test 33 pasado\n")

// Test 34: Mapeo de m√∫ltiples sin√≥nimos
console.log("Test 34: Mapeo de sin√≥nimos de transporte")
const test34 = parseVoiceCommand("pagu√© 30000 en gasolina")
const enrichedHU14_2 = enrichWithDatabaseIds(test34, mockCategoriesHU14, mockAccountsHU14)
console.assert(enrichedHU14_2.categoryName === "Transporte", "Debe mapear 'gasolina' a 'Transporte'")
console.assert(enrichedHU14_2.categoryId === 2, "Debe tener ID de categor√≠a Transporte")
console.log("‚úÖ Test 34 pasado\n")

// Test 35: Validaci√≥n de formato completo para backend
console.log("Test 35: Validaci√≥n de formato completo para backend")
const validation35 = validateBackendFormat(enrichedHU14)
console.assert(validation35.valid === true, "Comando enriquecido debe ser v√°lido para backend")
console.assert(validation35.errors.length === 0, "No debe tener errores")
console.log("‚úÖ Test 35 pasado\n")

console.log("üéâ Todos los tests de integraci√≥n con categor√≠as pasaron!")

console.log("\n=== üéâ TODOS LOS TESTS COMPLETADOS EXITOSAMENTE ===")
console.log("Total de tests ejecutados: 35")
console.log("- An√°lisis de intenciones: 10 tests")
console.log("- Correcciones: 5 tests")
console.log("- Ingresos: 3 tests")
console.log("- Modismos: 4 tests")
console.log("- Consultas: 4 tests")
console.log("- Persistencia: 1 test")
console.log("- Control y Navegaci√≥n: 5 tests")
console.log("- Integraci√≥n con Categor√≠as: 3 tests")

/**
 * Casos de prueba adicionales recomendados:
 * 
 * 1. "compr√© una pizza por 35000" -> Gasto, Alimentos, 35000
 * 2. "me pagaron 500000" -> Ingreso, 500000
 * 3. "invert√≠ 200000" -> Gasto, 200000
 * 4. "cobr√© 800000 de salario" -> Ingreso, Salario, 800000
 * 5. "pagu√© 120000 en gasolina" -> Gasto, Transporte, 120000
 * 6. "gast√© en el supermercado" -> Gasto, Alimentos, sin monto
 * 7. "recib√≠ dinero" -> Ingreso, sin monto
 * 8. "50 mil pesos en comida" -> Gasto, Alimentos, 50000
 * 
 * Correcciones:
 * 9. "no, quise decir 75000" -> Correcci√≥n de monto
 * 10. "error, era en Transporte" -> Correcci√≥n de categor√≠a
 * 11. "mal, era un ingreso" -> Correcci√≥n de tipo
 */


